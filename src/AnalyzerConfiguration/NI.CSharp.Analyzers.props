<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <!-- this would more correctly be: assemblyname contains .Test. We have an issue with test utilities projects, and test.testutilities projects. -->
    <NI_IsTestProject Condition="'$(NI_IsTestProject)' != 'True'">$(MSBuildProjectName.StartsWith("Tests."))</NI_IsTestProject>
    <NI_IsTestProject Condition="'$(NI_IsTestProject)' != 'True'">$(MSBuildProjectName.EndsWith(".Tests"))</NI_IsTestProject>
    <NI_IsTestProject Condition="'$(NI_IsTestProject)' != 'True'">$(MSBuildProjectName.StartsWith("!Tests."))</NI_IsTestProject>
    <NI_IsTestUtilitiesProject Condition="'$(NI_IsTestUtilitiesProject)' != 'True'">$(MSBuildProjectName.StartsWith("TestUtilities."))</NI_IsTestUtilitiesProject>
    <NI_IsTestUtilitiesProject Condition="'$(NI_IsTestUtilitiesProject)' != 'True'">$(MSBuildProjectName.StartsWith("!TestUtilities."))</NI_IsTestUtilitiesProject>
    <!-- The following is needed for misnamed TestUtilities that contain xaml because the generated project for the second compile appends random characters to the end of the project name -->
    <NI_IsTestUtilitiesProject Condition="'$(NI_IsTestUtilitiesProject)' != 'True' and '$(NI_IsTestProject)' != 'True'">$(MSBuildProjectName.Contains(".TestUtilities"))</NI_IsTestUtilitiesProject>
  </PropertyGroup>

  <!-- 
    GlobalAnalyzerConfigFiles did not handle multiple analyzer config conflicts properly until .NET 6, when global_level was introduced.
    Because we rely on test analyzer config file to override certain rule severities, we cannot enable analyzer config files if using 
    earlier than .NET 6.  For earlier than .NET 6, we will fallback to the deprecated Rulesets.

    See https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/configuration-files#precedence for more details.

    In addition, GlobalAnalyzerConfigFiles *must* be updated in props file, not targets file, because the Microsoft code analyzer
    targets file will take the value of GlobalAnalyzerConfigFiles and take any files that exist on disk and assign it to EditorConfigFiles.
    EditorConfigFiles is what is passed to the compile target, not GlobalAnalyzerConfigFiles.  Because our targets file may be imported *after*
    the Microsoft code analyzer targets file, by the time we update GlobalAnalyzerConfigFiles it will be too late.
  -->
  <ItemGroup Condition="$([MSBuild]::VersionGreaterThanOrEquals('$(NETCoreSdkVersion)', '6.0'))">
    <GlobalAnalyzerConfigFiles Include="$(MSBuildThisFileDirectory)../content/NI.CSharp.Analyzers.globalconfig" />
    <GlobalAnalyzerConfigFiles Include="$(MSBuildThisFileDirectory)../content/NI.CSharp.Analyzers.Tests.globalconfig" Condition="'$(NI_IsTestProject)' == 'True'" />
    <GlobalAnalyzerConfigFiles Include="$(MSBuildThisFileDirectory)../content/NI.CSharp.Analyzers.TestUtilities.globalconfig" Condition="'$(NI_IsTestUtilitiesProject)' == 'True'" />
  </ItemGroup>

</Project>
