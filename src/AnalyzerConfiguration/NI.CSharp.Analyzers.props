<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <!-- this would more correctly be: assemblyname contains .Test. We have an issue with test utilities projects, and test.testutilities projects. -->
    <NI_IsTestProject Condition="'$(NI_IsTestProject)' != 'True'">$(MSBuildProjectName.StartsWith("Tests."))</NI_IsTestProject>
    <NI_IsTestProject Condition="'$(NI_IsTestProject)' != 'True'">$(MSBuildProjectName.EndsWith(".Tests"))</NI_IsTestProject>
    <NI_IsTestProject Condition="'$(NI_IsTestProject)' != 'True'">$(MSBuildProjectName.StartsWith("!Tests."))</NI_IsTestProject>
    <NI_IsTestUtilitiesProject Condition="'$(NI_IsTestUtilitiesProject)' != 'True'">$(MSBuildProjectName.StartsWith("TestUtilities."))</NI_IsTestUtilitiesProject>
    <NI_IsTestUtilitiesProject Condition="'$(NI_IsTestUtilitiesProject)' != 'True'">$(MSBuildProjectName.StartsWith("!TestUtilities."))</NI_IsTestUtilitiesProject>
    <!-- The following is needed for misnamed TestUtilities that contain xaml because the generated project for the second compile appends random characters to the end of the project name -->
    <NI_IsTestUtilitiesProject Condition="'$(NI_IsTestUtilitiesProject)' != 'True' and '$(NI_IsTestProject)' != 'True'">$(MSBuildProjectName.Contains(".TestUtilities"))</NI_IsTestUtilitiesProject>

    <!--
      Microsoft supports analysis modes that preconfigure code analysis rules (e.g. All, Recommended, Minimum, etc).
      We will introduce a new analysis mode "NI" that represents the set of rules that we enable/disable.

      While Microsoft's analysis modes come with a dedicated global config that lists all CA rule specifications, 
      we currently construct the rules by setting per category warnings to all and then adding NI.CSharp.Analyzers.globalconfig
      that selectively overrides the warnings we want to disable.  This is done for maintenance reasons: we do not need to update
      the complete list of CA rules every year, we just need to maintain the rules we want to disable.

      The drawback to the approach is if individual projects want to configure a different per-category setting (i.e. 
      use NI mode but set Performance category to "Minimum"), it may not work if NI.CSharp.Analyzers.globalconfig has a
      conflicting rule.
      
      NI.CSharp.Analyzers.globalconfig has a higher global level than the per-category global config precisely
      to allow overriding of rules.  But if the per-category rules is preferred by the project, it may end up getting
      overriden by NI.CSharp.Analyzers.globalconfig.  The workaround is to copy the per-category global config to a
      new file that is included by the project and set the global level to higher than NI.CSharp.Analyzers.globalconfig.
    -->
    <AnalysisMode Condition="'$(AnalysisMode)' == ''">NI</AnalysisMode>

    <AnalysisLevel Condition="'$(AnalysisLevel)' == ''">7.0</AnalysisLevel>
  </PropertyGroup>

  <!-- 
    GlobalAnalyzerConfigFiles did not handle multiple analyzer config conflicts properly until .NET 6, when global_level was introduced.
    Because we rely on test analyzer config file to override certain rule severities, we cannot enable analyzer config files if using 
    earlier than .NET 6.  For earlier than .NET 6, we will fallback to the deprecated Rulesets.

    See https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/configuration-files#precedence for more details.

    In addition, GlobalAnalyzerConfigFiles *must* be updated in props file, not targets file, because the Microsoft code analyzer
    targets file will take the value of GlobalAnalyzerConfigFiles and take any files that exist on disk and assign it to EditorConfigFiles.
    EditorConfigFiles is what is passed to the compile target, not GlobalAnalyzerConfigFiles.  Because our targets file may be imported *after*
    the Microsoft code analyzer targets file, by the time we update GlobalAnalyzerConfigFiles it will be too late.
  -->
  <ItemGroup Condition="$([MSBuild]::VersionGreaterThanOrEquals('$(NETCoreSdkVersion)', '6.0')) and '$(AnalysisMode)' == 'NI'">
    <GlobalAnalyzerConfigFiles Include="$(MSBuildThisFileDirectory)../content/NI.CSharp.Analyzers.globalconfig" />
    <GlobalAnalyzerConfigFiles Include="$(MSBuildThisFileDirectory)../content/NI.CSharp.Analyzers.Tests.globalconfig" Condition="'$(NI_IsTestProject)' == 'True'" />
    <GlobalAnalyzerConfigFiles Include="$(MSBuildThisFileDirectory)../content/NI.CSharp.Analyzers.TestUtilities.globalconfig" Condition="'$(NI_IsTestUtilitiesProject)' == 'True'" />
  </ItemGroup>

</Project>
