<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="LRN001_Description" xml:space="preserve">
    <value>All restricted types should be defined under 'NationalInstruments.Restricted'.</value>
    <comment>An optional longer localizable description of the diagnostic.</comment>
  </data>
  <data name="LRN001_Message" xml:space="preserve">
    <value>The namespace '{0}' should be renamed to 'NationalInstruments.Restricted'</value>
    <comment>The format-able message the diagnostic displays.</comment>
  </data>
  <data name="LRN001_Title" xml:space="preserve">
    <value>There is only one restricted namespace</value>
    <comment>The title of the diagnostic.</comment>
  </data>
  <data name="LRT001_Description" xml:space="preserve">
    <value>All types should be in the 'NationalInstruments' namespace.</value>
    <comment>An optional longer localizable description of the diagnostic.</comment>
  </data>
  <data name="LRT001_Message" xml:space="preserve">
    <value>Type '{0}' is not in the 'NationalInstruments' namespace</value>
    <comment>The format-able message the diagnostic displays.</comment>
  </data>
  <data name="LRT001_Title" xml:space="preserve">
    <value>All types are in 'NationalInstruments' namespace</value>
    <comment>The title of the diagnostic.</comment>
  </data>
  <data name="NI1004_Description" xml:space="preserve">
    <value>Rather than using string literals, use a string resource (.resx), unless this string will never be displayed to users.</value>
    <comment>An optional longer localizable description of the diagnostic.</comment>
  </data>
  <data name="NI1004_Message" xml:space="preserve">
    <value>Use a string resource in a .resx file instead of string literal '{0}'</value>
    <comment>The format-able message the diagnostic displays.</comment>
  </data>
  <data name="NI1004_Title" xml:space="preserve">
    <value>Do not use string literals in code</value>
    <comment>The title of the diagnostic.</comment>
  </data>
  <data name="NI1005_Description" xml:space="preserve">
    <value>IWeakEventListener.ReceiveWeakEvents() must return true.</value>
    <comment>An optional longer localizable description of the diagnostic.</comment>
  </data>
  <data name="NI1005_Message" xml:space="preserve">
    <value>IWeakEventListener.ReceiveWeakEvents() must return true</value>
    <comment>The format-able message the diagnostic displays.</comment>
  </data>
  <data name="NI1005_Title" xml:space="preserve">
    <value>Do not return false from IWeakEventListener.ReceiveWeakEvents()</value>
    <comment>The title of the diagnostic.</comment>
  </data>
  <data name="NI1006_Description" xml:space="preserve">
    <value>These methods have been banned from NG code. Contact an architect for explanation.</value>
    <comment>An optional longer localizable description of the diagnostic.</comment>
  </data>
  <data name="NI1006_Message" xml:space="preserve">
    <value>Replace '{0}' with a non-banned method or get permission to suppress this rule.{1}  See http://nitalk.natinst.com/docs/DOC-153475 for more information</value>
    <comment>The format-able message the diagnostic displays.</comment>
  </data>
  <data name="NI1006_Title" xml:space="preserve">
    <value>Do not use banned methods</value>
    <comment>The title of the diagnostic.</comment>
  </data>
  <data name="NI1007_Description" xml:space="preserve">
    <value>Test classes must ultimately inherit from 'AutoTest'.</value>
    <comment>An optional longer localizable description of the diagnostic.</comment>
  </data>
  <data name="NI1007_Message" xml:space="preserve">
    <value>Test class '{0}' must ultimately derive from 'NationalInstruments.Core.TestUtilities.AutoTest'</value>
    <comment>The format-able message the diagnostic displays.</comment>
  </data>
  <data name="NI1007_Title" xml:space="preserve">
    <value>Test classes must ultimately inherit from 'AutoTest'</value>
    <comment>The title of the diagnostic.</comment>
  </data>
  <data name="NI1001_Message" xml:space="preserve">
    <value>Private field '{0}' must begin with an underscore and be camel-cased</value>
  </data>
  <data name="NI1001_Title" xml:space="preserve">
    <value>Private, mutable fields must begin with underscore and be camel-cased</value>
  </data>
  <data name="ParseError_Message" xml:space="preserve">
    <value>{0}</value>
    <comment>The exception text caught from parsing an "additional file".</comment>
  </data>
  <data name="NI1004_AttributeMissingTarget_Message" xml:space="preserve">
    <value>Attribute '{0}' with Scope '{1}' in file '{2}' is missing a Target value.</value>
    <comment>An attribute that affects NI1004 is missing a target parameter.</comment>
  </data>
  <data name="NI1015_Description" xml:space="preserve">
    <value>Await call while holding a model lock or inside a transaction.  This can lead to hard-to-diagnose hangs and intermittent test failures.  If you have questions, contact the Platform Framework team.</value>
    <comment>An optional longer localizable description of the diagnostic.</comment>
  </data>
  <data name="NI1015_Message" xml:space="preserve">
    <value>Await call while holding a model lock or inside a transaction</value>
    <comment>The format-able message the diagnostic displays.</comment>
  </data>
  <data name="NI1015_Title" xml:space="preserve">
    <value>Await while holding a model lock or inside a transaction</value>
    <comment>The title of the diagnostic.</comment>
  </data>
  <data name="NI1006_AdditionalInfo_Alternative" xml:space="preserve">
    <value>Alternative: {0}</value>
    <comment>Alternate methods that can be used instead of the banned method.</comment>
  </data>
  <data name="NI1006_AdditionalInfo_BannedInThisAssembly" xml:space="preserve">
    <value>Banned in this assembly.</value>
    <comment>Indicating that the method is banned only in this (and perhaps other) assemblies and not globally.</comment>
  </data>
  <data name="NI1006_AdditionalInfo_Justification" xml:space="preserve">
    <value>Justification: {0}</value>
    <comment>An explanation for why this method is banned.</comment>
  </data>
  <data name="NI1016_Description" xml:space="preserve">
    <value>Do not lock directly on PrivateMemberLock.  This will not get the desired behavior of asserting if other locks are token. Instead, call Acquire().</value>
    <comment>An optional longer localizable description of the diagnostic.</comment>
  </data>
  <data name="NI1016_Message" xml:space="preserve">
    <value>Do not lock directly on PrivateMemberLock - instead, call Acquire()</value>
    <comment>The format-able message the diagnostic displays.</comment>
  </data>
  <data name="NI1016_Title" xml:space="preserve">
    <value>Do not lock directly on PrivateMemberLock</value>
    <comment>The title of the diagnostic.</comment>
  </data>
  <data name="NI0017_Description" xml:space="preserve">
    <value>To enable fully backwards-compatible database migrations in EntityFramework, all columns in the DB should be nullable. This means DbSet cannot use value types (unless they are marked as [NotMapped]) or types that implement IEnumerable&lt;T&gt; (we don't know how they'll be handled).</value>
    <comment>An optional longer localizable description of the diagnostic.</comment>
  </data>
  <data name="NI0017_Diagnostic_IEnumerable" xml:space="preserve">
    <value>DbSet uses an IEnumerable that we don't know how EntityFramework will handle: {0} for {1} in {2}</value>
    <comment>The format-able message the diagnostic displays.</comment>
  </data>
  <data name="NI0017_Diagnostic_ValueType" xml:space="preserve">
    <value>DbSet creates non-nullable columns: {0} for {1} in {2} is a value type</value>
    <comment>The format-able message the diagnostic displays.</comment>
  </data>
  <data name="NI0017_Title" xml:space="preserve">
    <value>Database columns should be nullable</value>
    <comment>The title of the diagnostic.</comment>
  </data>
  <data name="NI1008_Title" xml:space="preserve">
    <value>Do not break backwards compatibility of released APIs</value>
    <comment>The title of the diagnostic.</comment>
  </data>
  <data name="NI1008_Description" xml:space="preserve">
    <value>Released APIs are monitored for backwards compatibility.</value>
    <comment>An optional longer localizable description of the diagnostic.</comment>
  </data>
  <data name="NI1008_Message" xml:space="preserve">
    <value>{0}</value>
    <comment>The format-able message the diagnostic displays.</comment>
  </data>
  <data name="NI1009_Description" xml:space="preserve">
    <value>Internal members/types need to be have the VisibleInternalAttribute to be accessible.</value>
    <comment>An optional longer localizable description of the diagnostic.</comment>
  </data>
  <data name="NI1009_Message" xml:space="preserve">
    <value>Cannot access internal member/type '{0}' without VisibleInternalAttribute</value>
    <comment>The format-able message the diagnostic displays.</comment>
  </data>
  <data name="NI1009_Title" xml:space="preserve">
    <value>Inaccessible internal member/type</value>
    <comment>The title of the diagnostic.</comment>
  </data>
  <data name="NI1704_Description" xml:space="preserve">
    <value>The name of an externally visible identifier contains one or more words that are not recognized by the Microsoft spelling checker library.</value>
  </data>
  <data name="NI1704_DictionaryParseError_Message" xml:space="preserve">
    <value>Error parsing dictionary '{0}': {1}</value>
  </data>
  <data name="NI1704_Assembly_Message" xml:space="preserve">
    <value>Correct the spelling of '{0}' in assembly name {1}</value>
  </data>
  <data name="NI1704_AssemblyMoreMeaningful_Message" xml:space="preserve">
    <value>Consider providing a more meaningful name than assembly name {0}</value>
  </data>
  <data name="NI1704_DelegateParameter_Message" xml:space="preserve">
    <value>In delegate {0}, correct the spelling of '{1}' in parameter name {2}</value>
  </data>
  <data name="NI1704_DelegateParameterMoreMeaningful_Message" xml:space="preserve">
    <value>In delegate {0}, consider providing a more meaningful name than parameter name {1}</value>
  </data>
  <data name="NI1704_Member_Message" xml:space="preserve">
    <value>Correct the spelling of '{0}' in member name {1}</value>
  </data>
  <data name="NI1704_MemberMoreMeaningful_Message" xml:space="preserve">
    <value>Consider providing a more meaningful name than member name {0}</value>
  </data>
  <data name="NI1704_MemberParameter_Message" xml:space="preserve">
    <value>In method {0}, correct the spelling of '{1}' in parameter name {2}</value>
  </data>
  <data name="NI1704_MemberParameterMoreMeaningful_Message" xml:space="preserve">
    <value>In method {0}, consider providing a more meaningful name than parameter name {1}</value>
  </data>
  <data name="NI1704_MethodTypeParameter_Message" xml:space="preserve">
    <value>On method {0}, correct the spelling of '{1}' in generic type parameter name {2}</value>
  </data>
  <data name="NI1704_MethodTypeParameterMoreMeaningful_Message" xml:space="preserve">
    <value>On method {0}, consider providing a more meaningful name than generic type parameter name {1}</value>
  </data>
  <data name="NI1704_Namespace_Message" xml:space="preserve">
    <value>Correct the spelling of '{0}' in namespace name '{1}'</value>
  </data>
  <data name="NI1704_NamespaceMoreMeaningful_Message" xml:space="preserve">
    <value>Consider providing a more meaningful name than namespace name '{0}'</value>
  </data>
  <data name="NI1704_Type_Message" xml:space="preserve">
    <value>Correct the spelling of '{0}' in type name {1}</value>
  </data>
  <data name="NI1704_TypeMoreMeaningful_Message" xml:space="preserve">
    <value>Consider providing a more meaningful name than type name {0}</value>
  </data>
  <data name="NI1704_TypeTypeParameter_Message" xml:space="preserve">
    <value>On type {0}, correct the spelling of '{1}' in generic type parameter name {2}</value>
  </data>
  <data name="NI1704_TypeTypeParameterMoreMeaningful_Message" xml:space="preserve">
    <value>On type {0}, consider providing a more meaningful name than generic type parameter name {1}</value>
  </data>
  <data name="NI1704_Variable_Message" xml:space="preserve">
    <value>Correct the spelling of '{0}' in variable name {1}</value>
  </data>
  <data name="NI1704_Title" xml:space="preserve">
    <value>Identifiers should be spelled correctly</value>
  </data>
  <data name="NI1017_Description" xml:space="preserve">
    <value>If you invoke a chain of methods with lambda expressions in a single line, split each invocation (except the first one) onto its own line.</value>
    <comment>An optional longer localizable description of the diagnostic.</comment>
  </data>
  <data name="NI1017_Message" xml:space="preserve">
    <value>Split chains of dotted method invocations with lambdas. Use well-named local variables if needed.</value>
    <comment>The format-able message the diagnostic displays.</comment>
  </data>
  <data name="NI1017_Title" xml:space="preserve">
    <value>Split chains of dotted method invocations with lambdas</value>
    <comment>The title of the diagnostic.</comment>
  </data>
  <data name="NI1018_Message" xml:space="preserve">
    <value>Do not use LINQ query syntax; use method syntax instead.</value>
  </data>
  <data name="NI1018_Title" xml:space="preserve">
    <value>Do not use LINQ query syntax.</value>
  </data>
  <data name="NI1800_CodeFixTitleFormat" xml:space="preserve">
    <value>Add this namespace to {0}</value>
    <comment>The title of code fix</comment>
  </data>
  <data name="NI1800_Description" xml:space="preserve">
    <value>This is not an approved namespace. If this namespace is valid, please add it to the approved namespaces list.</value>
    <comment>An optional longer localizable description of the diagnostic.</comment>
  </data>
  <data name="NI1800_FileReadErrorMessage" xml:space="preserve">
    <value>Error reading approved namespaces file</value>
    <comment>The format-able message the diagnostic displays.</comment>
  </data>
  <data name="NI1800_FileReadErrorTitle" xml:space="preserve">
    <value>Error reading file</value>
    <comment>The title of the diagnostic.</comment>
  </data>
  <data name="NI1800_Message" xml:space="preserve">
    <value>{0} is not an approved namespace. If this namespace is valid, please add it to the approved namespaces list - {1}.</value>
    <comment>The format-able message the diagnostic displays.</comment>
  </data>
  <data name="NI1800_ParseError_Message" xml:space="preserve">
    <value>{0}</value>
    <comment>The exception text caught from parsing an "additional file".</comment>
  </data>
  <data name="NI1800_TestDescription" xml:space="preserve">
    <value>This is not an approved test namespace. If this namespace is valid, please add it to the approved namespaces list.</value>
    <comment>An optional longer localizable description of the diagnostic.</comment>
  </data>
  <data name="NI1800_TestMessage" xml:space="preserve">
    <value>{0} is not an approved test namespace. If this namespace is valid, please add it to the approved namespaces list - {1}.</value>
    <comment>The format-able message the diagnostic displays.</comment>
  </data>
  <data name="NI1800_TestTitle" xml:space="preserve">
    <value>Not an approved test namespace</value>
    <comment>The title of the diagnostic.</comment>
  </data>
  <data name="NI1800_Title" xml:space="preserve">
    <value>Not an approved namespace</value>
    <comment>The title of the diagnostic.</comment>
  </data>
  <data name="NI1800_MissingApprovalFilesErrorMessage" xml:space="preserve">
    <value>No namespace approval files were found</value>
    <comment>The message the diagnostic displays.</comment>
  </data>
  <data name="NI1800_MissingApprovalFilesErrorTitle" xml:space="preserve">
    <value>Missing namespace approval files</value>
    <comment>The title of the diagnostic.</comment>
  </data>
  <data name="NI1816X_Description" xml:space="preserve">
    <value>Type derived from Disposable must not contain a finalizer.</value>
  </data>
  <data name="NI1816X_MessageFormat" xml:space="preserve">
    <value>Type name {0} must remove its finalizer</value>
  </data>
  <data name="NI1816X_Title" xml:space="preserve">
    <value>Disposable should not have finalizer</value>
  </data>
</root>